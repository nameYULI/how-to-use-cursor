---
description: 
globs: 
alwaysApply: false
---
# Cursor 使用技巧与最佳实践

本规则文档总结了在大型项目中高效使用 Cursor 的方法，结合实际开发经验，帮助你更好地理解、管理和优化代码库。

---

## 一、理解代码库
- 利用 `Include Project Structure` 功能，自动获取项目结构。
- 善用 Chat/Ask/Agent 模式，快速定位核心入口、主流程、依赖关系。
- 通过 `@Docs`、`@Web`、`MCP` 等工具，补充官方文档、社区知识和内部资料。

## 二、明确目标与变更
- 变更前先用 Chat/Ask 模式梳理需求、目标和影响范围。
- 让 AI 生成变更计划（Plan），并不断完善、细化。
- 变更范围要小，避免一次性大改动。

## 三、规则（Rules）管理
- 规则应结构化拆分，见下方推荐目录结构：

```
.cursor/rules/
├── README.mdc              # 总体概述和指引
├── architecture.mdc        # 系统架构规范
├── frontend/
│   ├── component.mdc       # 前端组件开发规范
│   ├── styling.mdc         # 样式和主题规范
│   └── state.mdc           # 状态管理规范
├── backend/
│   ├── api-design.mdc      # API 设计规范
│   ├── database.mdc        # 数据库使用规范
│   └── platform-adapter.mdc # 平台适配器规范
├── workflow/
│   ├── git.mdc             # Git 使用规范
│   └── ci-cd.mdc           # CI/CD 流程规范
└── code-quality/
    ├── naming.mdc          # 命名规范
    ├── testing.mdc         # 测试规范
    └── performance.mdc     # 性能优化规范
```

- 针对不同模块/文件类型，使用 Glob 表达式自动关联规则。
- 规则应持续优化，及时补充新经验和团队约定。

## 四、实用技巧
- 让 AI 逐行分析函数、梳理依赖、生成架构图。
- 通过"@Past Chats"复用历史探索记录。
- 结合工单、需求描述，生成更贴合实际的开发计划。
- 代码生成过程中，随时调整 Plan，分步执行。
- 充分利用官方文档、社区资源和内部知识库。

## 五、常见痛点与解决方案
- **上下文切换成本高**：用 rules 和结构化文档降低认知负担。
- **依赖关系复杂**：让 AI 自动梳理依赖树。
- **注释/命名不规范**：制定并执行命名、注释规则。
- **历史版本不清晰**：结合 Git 规则和变更记录，追溯历史。

## 六、进阶建议
- 结合 CI/CD，自动校验规则合规性。
- 通过自定义规则，约束团队协作流程。
- 定期复盘和优化规则体系。

---

> 让 Cursor 成为你的智能开发拍档，持续提升团队协作与代码质量！
